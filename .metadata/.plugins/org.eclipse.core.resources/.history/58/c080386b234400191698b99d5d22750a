package dataStructures;

import java.util.NoSuchElementException;
import java.util.function.Consumer;

public class TreeNode<T>
{
	private T data;
	private TreeNode<T> left, right;
	
	public TreeNode()
	{
		this(null);
	}
	
	public TreeNode(T data)
	{
		this.data = data;
	}
	
	public T getData()
	{
		return data;
	}
	
	public TreeNode<T> getLeft()
	{
		return left;
	}
	
	public TreeNode<T> getRight()
	{
		return right;
	}
	
	public void setLeft(TreeNode<T> left)
	{
		this.left = left;
	}
	
	public void setRight(TreeNode<T> right)
	{
		this.right = right;
	}
	
	public void visitInorder(Consumer<T> action)
	{
		if(left != null)
			left.visitInorder(action);
		action.accept(data);
		if(right != null)
			right.visitInorder(action);
	}

	public void visitPreorder(Consumer<T> action)
	{
		action.accept(data);
		if(left != null)
			left.visitInorder(action);
		if(right != null)
			right.visitInorder(action);
	}
	
	public void visitPostorder(Consumer<T> action)
	{
		if(left != null)
			left.visitInorder(action);
		if(right != null)
			right.visitInorder(action);
		action.accept(data);
	}
	
	public int depth()
	{
		System.out.println(this);
		int i = 0, j = 0;
		if(left != null)
			i = left.depth();
		if(right != null)
			j = right.depth();
		
		return Math.max(i, j) + 1;
	}
	
	public boolean add(TreeNode<T> newNode)
	{
		if(left == null)
		{
			left = newNode;
			return true;
		}
		
		if(right == null)
		{
			right = newNode;
			return true;
		}
		
		return false;
	}
	
	public LinkedListQueue<TreeNode<T>> getLevelDown(int level)
	{
		LinkedListQueue<TreeNode<T>> queue = new LinkedListQueue<>();
		if(level == 0)
		{
			queue.enqueue(this);
		}
		else
		{
			LinkedListQueue<TreeNode<T>> leftQ = new LinkedListQueue<>(), rightQ = new LinkedListQueue<>();
			if(left != null)
				leftQ = left.getLevelDown(level-1);
			if(right != null)
				rightQ = right.getLevelDown(level-1);
			
			try
			{
				while(true)
					queue.enqueue(leftQ.dequeue());
			}
			catch(NoSuchElementException e) {}
			
			try
			{
				while(true)
					queue.enqueue(rightQ.dequeue());
			}
			catch(NoSuchElementException e) {}
		}
		return queue;
	}
}
