package dataStructures;

import java.util.function.Consumer;

public class TreeNode<T>
{
	private T data;
	private TreeNode<T> left, right;
	
	public TreeNode()
	{
		this(null);
	}
	
	public TreeNode(T data)
	{
		this.data = data;
	}
	
	public T getData()
	{
		return data;
	}
	
	public TreeNode<T> getLeft()
	{
		return left;
	}
	
	public TreeNode<T> getRight()
	{
		return right;
	}
	
	public void setLeft(TreeNode<T> left)
	{
		this.left = left;
	}
	
	public void setRight(TreeNode<T> right)
	{
		this.right = right;
	}
	
	public void visitPreorder(Consumer<T> action)
	{
		action.accept(data);
		if(left != null)
			left.visitInorder(action);
		if(right != null)
			right.visitInorder(action);
	}
	
	public void visitInorder(Consumer<T> action)
	{
		if(left != null)
			left.visitInorder(action);
		action.accept(data);
		if(right != null)
			right.visitInorder(action);
	}
	
	public void visitPostorder(Consumer<T> action)
	{
		if(left != null)
			left.visitInorder(action);
		if(right != null)
			right.visitInorder(action);
		action.accept(data);
	}
	
	public int depth()
	{
		int i = 0, j = 0;
		if(left != null)
			i = left.depth();
		if(right != null)
			j = right.depth();
		
		return Math.max(i, j) + 1;
	}
}
